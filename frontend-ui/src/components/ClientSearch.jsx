import { useState } from 'react';
import { scoringApi } from '../services/api';

export const ClientSearch = ({ onClientDataLoaded, onLoading, onError }) => {
  const [clientId, setClientId] = useState('');

  const handleSearch = async (e) => {
    e.preventDefault();
    if (!clientId.trim()) {
      onError('–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞');
      return;
    }

    onLoading(true);
    onError('');

    try {
      console.log('üîÑ Starting REAL API request for:', clientId);
      
      // ‚úÖ –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–π API (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω mock)
      const data = await scoringApi.getClientScoring(clientId);
      console.log('üéâ Real API success:', data);
      onClientDataLoaded(data);
      
    } catch (err) {
      console.error('üí• API failed:', err);
      
      // Fallback –Ω–∞ mock –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
      console.log('üîÑ Using fallback mock data...');
      const mockData = {
        clientInfo: {
          clientId: clientId,
          firstName: "–ò–≤–∞–Ω",
          lastName: "–ü–µ—Ç—Ä–æ–≤",
          age: 35,
          passportNumber: "4510 123456",
          requestCount: 5
        },
        scoringResult: {
          score: Math.floor(Math.random() * 100),
          riskLevel: ["LOW", "MEDIUM", "HIGH"][Math.floor(Math.random() * 3)],
          description: "–î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ (API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω): " + clientId
        },
        timestamp: new Date().toISOString()
      };
      
      onClientDataLoaded(mockData);
      onError('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ. API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ' + err.message);
      
    } finally {
      onLoading(false);
    }
  };

  return (
    <div className="client-search">
      <form onSubmit={handleSearch} className="search-form">
        <div className="search-input-container">
          <input
            type="text"
            value={clientId}
            onChange={(e) => setClientId(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞ (CLIENT_001, CLIENT_002, CLIENT_003)"
            className="search-input"
          />
          <button type="submit" className="search-button">
            –ü–æ–∏—Å–∫
          </button>
        </div>
      </form>
      <div className="demo-hint">
        <p>üí° –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ: CLIENT_001, CLIENT_002, CLIENT_003</p>
        <p>üîß –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å API –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ</p>
      </div>
    </div>
  );
};